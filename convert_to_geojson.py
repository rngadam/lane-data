#!/usr/bin/env python3
# This program converts the index.json file generated by the exiftool to a geojson file
# that can be used in a map. The geojson file contains the location of the photos and
# the path of the photos. The path is used to display the photos in the map.
# The geojson file is saved in the same repository as the index.json file.
# The geojson file is named as index.geojson
# The geojson file can be used in a map.

import json
import argparse
import re

def dms_str_to_decimal(coord_str):
    # Define a case-insensitive regex pattern to match degrees, minutes, seconds, and direction
    pattern = r"(\d+) deg (\d+)' ([\d.]+)\" ([NSWE])"

    # Use regex to extract matches with case-insensitivity
    matches = re.findall(pattern, coord_str, re.IGNORECASE)

    if not matches:
        raise ValueError("Invalid coordinate string format")

    # Extract values from the matches
    latitude_deg, latitude_min, latitude_sec = map(float, matches[0][:3])
    longitude_deg, longitude_min, longitude_sec = map(float, matches[1][:3])
    latitude_dir, longitude_dir = matches[0][3], matches[1][3]

    # Convert to decimal coordinates
    decimal_latitude = dms_to_decimal(latitude_deg, latitude_min, latitude_sec, latitude_dir)
    decimal_longitude = dms_to_decimal(longitude_deg, longitude_min, longitude_sec, longitude_dir)

    return decimal_latitude, decimal_longitude

def dms_to_decimal(degrees, minutes, seconds, direction):
    decimal_degrees = degrees + (minutes / 60) + (seconds / 3600)

    if direction in ['S', 'W']:
        decimal_degrees = -decimal_degrees

    # tend to be repeating numbers to infinity after 6 digits...
    return round(decimal_degrees, 6)

def convert_latlong(photo):
    """Convert the latitude and longitude of a photo to decimal degrees

    exiftool exports in this format:

      "GPSPosition": "45 deg 32' 59.17\" N, 73 deg 36' 53.00\" W",

    and we want this format:

      "latitude": 45.549769,
      "longitude":  ,
    """
    # Convert the latitude and longitude to decimal degrees
    photo["latitude"], photo["longitude"] = dms_str_to_decimal(photo["GPSPosition"])


def convert(exif_index, base_url):
    # This function converts the index.json file to a geojson file
    # Input: index.json file
    # Output: geojson file

    # Create a geojson file
    geojson = {"type": "FeatureCollection", "features": []}

    # Create a feature for each photo
    for photo in exif_index:
        if "GPSPosition" not in photo:
            print('No GPSPosition for ' + photo["SourceFile"])
            continue
        # Create a feature
        feature = {
            "type": "Feature",
            "properties": {},
            "geometry": {"type": "Point", "coordinates": []},
        }

        convert_latlong(photo)
        # Add the location of the photo to the feature
        feature["geometry"]["coordinates"] = [photo["longitude"], photo["latitude"]]

        # Add the path of the photo to the feature
        feature["properties"]["path"] = base_url + photo["SourceFile"]

        # Add the feature to the geojson
        geojson["features"].append(feature)
    return geojson


if __name__ == "__main__":
    # Create a parser
    parser = argparse.ArgumentParser(description="Convert index.json to geojson")

    # Add arguments
    parser.add_argument(
        "index",
        help="index.json file",
        default="index.json",
        nargs="?")
    parser.add_argument(
        "base_url",
        help="where the photos are hosted",
        nargs="?",
        default="https://raw.githubusercontent.com/rngadam/lane-data/main/sources/")

    # Parse the arguments
    args = parser.parse_args()

    # Open the index.json file
    with open(args.index) as json_file:
        exif_index = json.load(json_file)

    # Convert the index.json file to a geojson file
    geojson = convert(exif_index, args.base_url)

    # Save the geojson file
    with open("index.geojson", "w") as outfile:
        json.dump(geojson, outfile, indent=4)
